variables:
  libiioPipelineId: 9

trigger:
  branches:
    include:
    - main
    - master
    - staging/*
    - 20*

pr:
  branches:
    include:
    - main
    - master
    - 20*

jobs:
- job: LinuxBuilds
  strategy:
    matrix:
      ubuntu_18_04_x86_64:
        imageName: 'ubuntu-18.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: bionic
        artifactName: 'Linux-Ubuntu-18.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu_20_04_x86_64:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(System.TeamProjectId)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_linux
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_linux
    displayName: "Build"
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: ARMBuilds
  strategy:
    matrix:
      ubuntu-ppc64le:
        imageName: 'ubuntu-latest'
        arch: ppc64le
        artifactName: 'Ubuntu-ppc64le'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu-x390x:
        imageName: 'ubuntu-latest'
        arch: s390x
        artifactName: 'Ubuntu-x390x'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      debian_buster_arm32v7:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'arm32v7/debian_docker'
        OS_VERSION: 'buster'
        artifactName: 'Ubuntu-arm32v7'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      debian_buster_arm64v8:
        imageName: 'ubuntu-latest'
        OS_TYPE: 'arm64v8/debian_docker'
        OS_VERSION: 'buster'
        artifactName: 'Ubuntu-arm64v8'
        PACKAGE_TO_INSTALL: 'build/*.deb'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(System.TeamProjectId)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_linux
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_linux
    displayName: "Build"
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: macOSBuilds
  strategy:
    matrix:
      macOS_10_15:
        imageName: 'macOS-10.15'
        artifactName: 'macOS-10.15'
      macOS_11:
        imageName: 'macOS-11'
        artifactName: 'macOS-11'
  pool:
    vmImage: $(imageName)
  variables:
    PACKAGE_TO_INSTALL: 'build/*.pkg'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(System.TeamProjectId)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_darwin
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_darwin
    displayName: "Build"
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: WindowsBuilds
  strategy:
    matrix:
      VS2022:
          imageName: 'windows-2022'
          COMPILER: 'Visual Studio 17 2022'
          ARCH: 'x64'
          artifactName: 'Windows-VS-2022-x64'
      VS2019_Win64:
        imageName: 'windows-2019'
        COMPILER: 'Visual Studio 16 2019'
        ARCH: 'x64'
        artifactName: 'Windows-VS-2019-x64'
  pool:
    vmImage: $[ variables['imageName'] ]
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(System.TeamProjectId)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: '$(Agent.BuildDirectory)/s/build/'
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: .\CI\install_deps_win.ps1
    displayName: Dependencies
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: .\CI\build_win.ps1
    displayName: Build
  - task: CopyFiles@2
    displayName: 'Copy libraries'
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/Release'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    displayName: 'Copy ad9361.h header'
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/'
      contents: 'ad9361.h'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'
