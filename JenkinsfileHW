// Pipeline
lock(label: 'adgt_test_harness_boards') {
    @Library('sdgtt-lib@adgt-test-harness') _ // Not necessary when we turn on global libraries :)
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "release"
    def firmwareVersion = 'v0.32'
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)
  
    //Udpate repos
    harness.set_env('nebula_repo', 'https://github.com/sdgtt/nebula.git')
    harness.set_env('nebula_branch','dev_fixes')
    harness.set_env('libiio_branch', 'v0.21')
    harness.set_env('telemetry_repo', 'https://github.com/sdgtt/telemetry.git')
    harness.set_env('telemetry_branch', 'master')
  
    //Update agent with required deps
    harness.update_agents()
  
    //Set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(false)
    harness.set_send_telemetry(false)
    harness.set_enable_resource_queuing(true)
    harness.set_elastic_server('192.168.10.1')
    harness.set_required_hardware(["pluto",
                                  "zynq-adrv9361-z7035-fmc",
                                  "zynq-zed-adv7511-ad9364-fmcomms4",
                                  "zynq-zed-adv7511-ad9361-fmcomms2-3",
                                  "zynq-zc706-adv7511-ad9361-fmcomms5",
                                  "zynq-zc702-adv7511-ad9361-fmcomms2-3",
                                  "zynq-adrv9364-z7020-bob-cmos"])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")
  
    // Set stages (Stages are run sequentially on agents.)
    harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
                      harness.stage_library("RecoverBoard"))
  
    // Test stage
    def stage = { String board ->
        try {
            stage("Test libad9361") {
                def ip = nebula("update-config -s network-config -f dutip --board-name="+board)
                checkout scm
                sh 'mkdir build'
                dir('build')
                {
                    sh 'cmake ..'
                    sh 'make'
                    def vars = ""
                    if (board.contains("fmcomms5")) {
                        vars = 'URI_FMCOMMS5="ip:'+ip+'" '
                    }
                    sh vars+'URI_AD9361="ip:'+ip+'" ctest -T test --no-compress-output -V'
                }
            }
        }
        finally
        {
            dir('build'){
                xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'Testing/**/*.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            }
        }
    }
    harness.add_stage(stage,'continueWhenFail')
  
    // Send results
    harness.add_stage(harness.stage_library('SendResults'),'continueWhenFail')
  
    // Go go
    harness.run_stages()
}
